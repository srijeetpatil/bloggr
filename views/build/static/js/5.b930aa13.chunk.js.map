{"version":3,"sources":["components/Displayer.js","../node_modules/@material-ui/core/esm/styles/makeStyles.js","pages/Blog.tsx"],"names":["HOTKEYS","toggleMark","editor","format","isMarkActive","Editor","removeMark","addMark","marks","Element","attributes","children","element","type","Leaf","leaf","bold","code","italic","underline","initialValue","text","RichTextExample","props","renderElement","useCallback","renderLeaf","useMemo","withHistory","withReact","createEditor","value","onChange","setValue","placeholder","spellCheck","autoFocus","readOnly","onKeyDown","event","hotkey","isHotkey","preventDefault","makeStyles","stylesOrCreator","options","arguments","length","undefined","makeStylesWithoutDefault","_extends","defaultTheme","muiStyles","spinner","color","margin","styles","authorStyle","fontSize","spinnerContainer","display","width","alignItems","justifyContent","height","Blog","history","useHistory","useState","loading","setLoading","useEffect","run","a","getBlogByName","match","params","id","created_at","blog","Date","data","style","CircularProgress","className","error","push","title","author","username","getDate","parseInt","getMonth","getFullYear","Displayer","JSON","parse","content"],"mappings":"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","file":"static/js/5.b930aa13.chunk.js","sourcesContent":["import React, { useCallback, useMemo } from \"react\";\r\nimport isHotkey from \"is-hotkey\";\r\nimport { Editable, withReact, Slate } from \"slate-react\";\r\nimport { Editor, createEditor } from \"slate\";\r\nimport { withHistory } from \"slate-history\";\r\n\r\nconst HOTKEYS = {\r\n  \"mod+b\": \"bold\",\r\n  \"mod+i\": \"italic\",\r\n  \"mod+u\": \"underline\",\r\n  \"mod+`\": \"code\",\r\n};\r\n\r\nconst RichTextExample = (props) => {\r\n  const renderElement = useCallback((props) => <Element {...props} />, []);\r\n  const renderLeaf = useCallback((props) => <Leaf {...props} />, []);\r\n  const editor = useMemo(() => withHistory(withReact(createEditor())), []);\r\n\r\n  return (\r\n    <Slate\r\n      editor={editor}\r\n      value={props.value || initialValue}\r\n      onChange={(value) => props.setValue(value)}\r\n    >      \r\n      <Editable\r\n        renderElement={renderElement}\r\n        renderLeaf={renderLeaf}\r\n        placeholder=\"Create your blog here!\"\r\n        spellCheck\r\n        autoFocus\r\n        readOnly\r\n        onKeyDown={(event) => {\r\n          for (const hotkey in HOTKEYS) {\r\n            if (isHotkey(hotkey, event)) {\r\n              event.preventDefault();\r\n              const mark = HOTKEYS[hotkey];\r\n              toggleMark(editor, mark);\r\n            }\r\n          }\r\n        }}\r\n      />\r\n    </Slate>\r\n  );\r\n};\r\n\r\nconst toggleMark = (editor, format) => {\r\n  const isActive = isMarkActive(editor, format);\r\n\r\n  if (isActive) {\r\n    Editor.removeMark(editor, format);\r\n  } else {\r\n    Editor.addMark(editor, format, true);\r\n  }\r\n};\r\n\r\nconst isMarkActive = (editor, format) => {\r\n  const marks = Editor.marks(editor);\r\n  return marks ? marks[format] === true : false;\r\n};\r\n\r\nconst Element = ({ attributes, children, element }) => {\r\n  switch (element.type) {\r\n    case \"block-quote\":\r\n      return <blockquote {...attributes}>{children}</blockquote>;\r\n    case \"bulleted-list\":\r\n      return <ul {...attributes}>{children}</ul>;\r\n    case \"heading-one\":\r\n      return <h1 {...attributes}>{children}</h1>;\r\n    case \"heading-two\":\r\n      return <h2 {...attributes}>{children}</h2>;\r\n    case \"list-item\":\r\n      return <li {...attributes}>{children}</li>;\r\n    case \"numbered-list\":\r\n      return <ol {...attributes}>{children}</ol>;\r\n    default:\r\n      return <p {...attributes}>{children}</p>;\r\n  }\r\n};\r\n\r\nconst Leaf = ({ attributes, children, leaf }) => {\r\n  if (leaf.bold) {\r\n    children = <strong>{children}</strong>;\r\n  }\r\n\r\n  if (leaf.code) {\r\n    children = <code>{children}</code>;\r\n  }\r\n\r\n  if (leaf.italic) {\r\n    children = <em>{children}</em>;\r\n  }\r\n\r\n  if (leaf.underline) {\r\n    children = <u>{children}</u>;\r\n  }\r\n\r\n  return <span {...attributes}>{children}</span>;\r\n};\r\n\r\nconst initialValue = [\r\n  {\r\n    type: \"paragraph\",\r\n    children: [\r\n      { text: \"This is editable \" },\r\n      { text: \"rich\", bold: true },\r\n      { text: \" text, \" },\r\n      { text: \"much\", italic: true },\r\n      { text: \" better than a \" },\r\n      { text: \"<textarea>\", code: true },\r\n      { text: \"!\" },\r\n    ],\r\n  },\r\n  {\r\n    type: \"paragraph\",\r\n    children: [\r\n      {\r\n        text: \"Since it's rich text, you can do things like turn a selection of text \",\r\n      },\r\n      { text: \"bold\", bold: true },\r\n      {\r\n        text: \", or add a semantically rendered block quote in the middle of the page, like this:\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: \"block-quote\",\r\n    children: [{ text: \"A wise quote.\" }],\r\n  },\r\n  {\r\n    type: \"paragraph\",\r\n    children: [{ text: \"Try it out for yourself!\" }],\r\n  },\r\n];\r\n\r\nexport default RichTextExample;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { makeStyles as makeStylesWithoutDefault } from '@material-ui/styles';\nimport defaultTheme from './defaultTheme';\n\nfunction makeStyles(stylesOrCreator) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return makeStylesWithoutDefault(stylesOrCreator, _extends({\n    defaultTheme: defaultTheme\n  }, options));\n}\n\nexport default makeStyles;","import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Displayer from \"../components/Displayer\";\r\nimport { CircularProgress, makeStyles } from \"@material-ui/core\";\r\n\r\ninterface BlogProps {\r\n  getBlogByName: Function;\r\n  blog: any;\r\n  match: any;\r\n}\r\n\r\nconst muiStyles: any = makeStyles({\r\n  spinner: { color: \"black\", margin: \"auto\" },\r\n});\r\n\r\nconst styles: {\r\n  authorStyle: React.CSSProperties;\r\n  spinnerContainer: React.CSSProperties;\r\n} = {\r\n  authorStyle: {\r\n    fontSize: \"12px\",\r\n  },\r\n  spinnerContainer: {\r\n    display: \"flex\",\r\n    width: \"100%\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    height: \"70vh\",\r\n  },\r\n};\r\n\r\nexport default function Blog(props: BlogProps) {\r\n  const history = useHistory();\r\n  const [loading, setLoading] = useState(true);\r\n  /* Call the getBlog here */\r\n  useEffect(() => {\r\n    run();\r\n  }, []);\r\n\r\n  /* This part loads the blog data when this route is visited, and only then it sets loading to false */\r\n  const run = async () => {\r\n    await props.getBlogByName(props.match.params.id);\r\n    setLoading(false);\r\n  };\r\n\r\n  /* Get date on which the blog was created */\r\n  let created_at: any = props.blog ? new Date(props.blog.data.created_at) : \"\";\r\n\r\n  return (\r\n    <div>\r\n      {loading ? (\r\n        <div style={styles.spinnerContainer}>\r\n          <CircularProgress className={muiStyles.spinner} />\r\n        </div>\r\n      ) : (\r\n        <>\r\n          {props.blog && (\r\n            <>\r\n              {props.blog.data.error ? (\r\n                history.push(\"/404\")\r\n              ) : (\r\n                <>\r\n                  <h1 style={{ fontSize: \"50px\" }} className=\"headingFont\">\r\n                    {props.blog.data.title}\r\n                  </h1>\r\n                  <label style={styles.authorStyle}>\r\n                    Authored by {props.blog.data.author.username}{\" \"}\r\n                    {created_at.getDate() +\r\n                      \"-\" +\r\n                      parseInt(created_at.getMonth() + 1) +\r\n                      \"-\" +\r\n                      created_at.getFullYear()}\r\n                  </label>\r\n                  <Displayer value={JSON.parse(props.blog.data.content)} />\r\n                </>\r\n              )}\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}