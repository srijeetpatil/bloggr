{"version":3,"sources":["components/Components.js","components/Editor.js","pages/Create.tsx"],"names":["Button","React","forwardRef","ref","className","active","reversed","props","cx","css","Icon","Menu","Toolbar","HOTKEYS","LIST_TYPES","toggleMark","editor","format","isMarkActive","Editor","removeMark","addMark","isBlockActive","nodes","match","n","type","marks","Element","attributes","children","element","Leaf","leaf","bold","code","italic","underline","BlockButton","icon","useSlate","onMouseDown","event","preventDefault","isActive","isList","includes","Transforms","unwrapNodes","split","setNodes","block","wrapNodes","toggleBlock","MarkButton","initialValue","text","RichTextExample","renderElement","useCallback","renderLeaf","useMemo","withHistory","withReact","createEditor","value","onChange","setValue","placeholder","spellCheck","autoFocus","onKeyDown","hotkey","isHotkey","styles","container","display","flexDirection","row","alignItems","marginBottom","backgroundColor","width","padding","blogName","marginLeft","outline","border","borderRadius","createButton","cursor","errorCode","color","titleError","Create","useState","title","setTitle","error","setError","createBlog","content","a","c","JSON","stringify","create","window","location","href","response","data","style","e","target","onClick","length"],"mappings":"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","file":"static/js/6.0f64bd3a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { cx, css } from \"@emotion/css\";\r\n\r\nexport const Button = React.forwardRef(\r\n  ({ className, active, reversed, ...props }, ref) => (\r\n    <span\r\n      {...props}\r\n      ref={ref}\r\n      className={cx(\r\n        className,\r\n        css`\r\n          cursor: pointer;\r\n          color: ${reversed\r\n            ? active\r\n              ? \"white\"\r\n              : \"#aaa\"\r\n            : active\r\n            ? \"black\"\r\n            : \"#ccc\"};\r\n        `\r\n      )}\r\n    />\r\n  )\r\n);\r\n\r\nexport const EditorValue = React.forwardRef(\r\n  ({ className, value, ...props }, ref) => {\r\n    const textLines = value.document.nodes\r\n      .map((node) => node.text)\r\n      .toArray()\r\n      .join(\"\\n\");\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        {...props}\r\n        className={cx(\r\n          className,\r\n          css`\r\n            margin: 30px -20px 0;\r\n          `\r\n        )}\r\n      >\r\n        <div\r\n          className={css`\r\n            font-size: 14px;\r\n            padding: 5px 20px;\r\n            color: #404040;\r\n            border-top: 2px solid #eeeeee;\r\n            background: #f8f8f8;\r\n          `}\r\n        >\r\n          Slate's value as text\r\n        </div>\r\n        <div\r\n          className={css`\r\n            color: #404040;\r\n            font: 12px monospace;\r\n            white-space: pre-wrap;\r\n            padding: 10px 20px;\r\n            div {\r\n              margin: 0 0 0.5em;\r\n            }\r\n          `}\r\n        >\r\n          {textLines}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport const Icon = React.forwardRef(({ className, ...props }, ref) => (\r\n  <span\r\n    {...props}\r\n    ref={ref}\r\n    className={cx(\r\n      \"material-icons\",\r\n      className,\r\n      css`\r\n        font-size: 18px;\r\n        vertical-align: text-bottom;\r\n      `\r\n    )}\r\n  />\r\n));\r\n\r\nexport const Instruction = React.forwardRef(({ className, ...props }, ref) => (\r\n  <div\r\n    {...props}\r\n    ref={ref}\r\n    className={cx(\r\n      className,\r\n      css`\r\n        white-space: pre-wrap;\r\n        margin: 0 -20px 10px;\r\n        padding: 10px 20px;\r\n        font-size: 14px;\r\n        background: #f8f8e8;\r\n      `\r\n    )}\r\n  />\r\n));\r\n\r\nexport const Menu = React.forwardRef(({ className, ...props }, ref) => (\r\n  <div\r\n    {...props}\r\n    ref={ref}\r\n    className={cx(\r\n      className,\r\n      css`\r\n        & > * {\r\n          display: inline-block;\r\n        }\r\n\r\n        & > * + * {\r\n          margin-left: 15px;\r\n        }\r\n      `\r\n    )}\r\n  />\r\n));\r\n\r\nexport const Portal = ({ children }) => {\r\n  return ReactDOM.createPortal(children, document.body);\r\n};\r\n\r\nexport const Toolbar = React.forwardRef(({ className, ...props }, ref) => (\r\n  <Menu\r\n    {...props}\r\n    ref={ref}\r\n    className={cx(\r\n      className,\r\n      css`\r\n        position: relative;\r\n        padding: 1px 18px 17px;\r\n        margin: 0 -20px;\r\n        border-bottom: 2px solid #eee;\r\n        margin-bottom: 20px;\r\n      `\r\n    )}\r\n  />\r\n));\r\n","import React, { useCallback, useMemo } from \"react\";\r\nimport isHotkey from \"is-hotkey\";\r\nimport { Editable, withReact, useSlate, Slate } from \"slate-react\";\r\nimport { Editor, Transforms, createEditor } from \"slate\";\r\nimport { withHistory } from \"slate-history\";\r\n\r\nimport { Button, Icon, Toolbar } from \"./Components\";\r\n\r\nconst HOTKEYS = {\r\n  \"mod+b\": \"bold\",\r\n  \"mod+i\": \"italic\",\r\n  \"mod+u\": \"underline\",\r\n  \"mod+`\": \"code\",\r\n};\r\n\r\nconst LIST_TYPES = [\"numbered-list\", \"bulleted-list\"];\r\n\r\nconst RichTextExample = (props) => {\r\n  const renderElement = useCallback((props) => <Element {...props} />, []);\r\n  const renderLeaf = useCallback((props) => <Leaf {...props} />, []);\r\n  const editor = useMemo(() => withHistory(withReact(createEditor())), []);\r\n\r\n  return (\r\n    <Slate\r\n      editor={editor}\r\n      value={props.value || initialValue}\r\n      onChange={(value) => props.setValue(value)}\r\n    >\r\n      <Toolbar>\r\n        <MarkButton format=\"bold\" icon=\"format_bold\" />\r\n        <MarkButton format=\"italic\" icon=\"format_italic\" />\r\n        <MarkButton format=\"underline\" icon=\"format_underlined\" />\r\n        <MarkButton format=\"code\" icon=\"code\" />\r\n        <BlockButton format=\"heading-one\" icon=\"looks_one\" />\r\n        <BlockButton format=\"heading-two\" icon=\"looks_two\" />\r\n        <BlockButton format=\"block-quote\" icon=\"format_quote\" />\r\n        <BlockButton format=\"numbered-list\" icon=\"format_list_numbered\" />\r\n        <BlockButton format=\"bulleted-list\" icon=\"format_list_bulleted\" />\r\n      </Toolbar>\r\n      <Editable\r\n        renderElement={renderElement}\r\n        renderLeaf={renderLeaf}\r\n        placeholder=\"Create your blog here!\"\r\n        spellCheck\r\n        autoFocus        \r\n        onKeyDown={(event) => {\r\n          for (const hotkey in HOTKEYS) {\r\n            if (isHotkey(hotkey, event)) {\r\n              event.preventDefault();\r\n              const mark = HOTKEYS[hotkey];\r\n              toggleMark(editor, mark);\r\n            }\r\n          }\r\n        }}\r\n      />\r\n    </Slate>\r\n  );\r\n};\r\n\r\nconst toggleBlock = (editor, format) => {\r\n  const isActive = isBlockActive(editor, format);\r\n  const isList = LIST_TYPES.includes(format);\r\n\r\n  Transforms.unwrapNodes(editor, {\r\n    match: (n) => LIST_TYPES.includes(n.type),\r\n    split: true,\r\n  });\r\n\r\n  Transforms.setNodes(editor, {\r\n    type: isActive ? \"paragraph\" : isList ? \"list-item\" : format,\r\n  });\r\n\r\n  if (!isActive && isList) {\r\n    const block = { type: format, children: [] };\r\n    Transforms.wrapNodes(editor, block);\r\n  }\r\n};\r\n\r\nconst toggleMark = (editor, format) => {\r\n  const isActive = isMarkActive(editor, format);\r\n\r\n  if (isActive) {\r\n    Editor.removeMark(editor, format);\r\n  } else {\r\n    Editor.addMark(editor, format, true);\r\n  }\r\n};\r\n\r\nconst isBlockActive = (editor, format) => {\r\n  const [match] = Editor.nodes(editor, {\r\n    match: (n) => n.type === format,\r\n  });\r\n\r\n  return !!match;\r\n};\r\n\r\nconst isMarkActive = (editor, format) => {\r\n  const marks = Editor.marks(editor);\r\n  return marks ? marks[format] === true : false;\r\n};\r\n\r\nconst Element = ({ attributes, children, element }) => {\r\n  switch (element.type) {\r\n    case \"block-quote\":\r\n      return <blockquote {...attributes}>{children}</blockquote>;\r\n    case \"bulleted-list\":\r\n      return <ul {...attributes}>{children}</ul>;\r\n    case \"heading-one\":\r\n      return <h1 {...attributes}>{children}</h1>;\r\n    case \"heading-two\":\r\n      return <h2 {...attributes}>{children}</h2>;\r\n    case \"list-item\":\r\n      return <li {...attributes}>{children}</li>;\r\n    case \"numbered-list\":\r\n      return <ol {...attributes}>{children}</ol>;\r\n    default:\r\n      return <p {...attributes}>{children}</p>;\r\n  }\r\n};\r\n\r\nconst Leaf = ({ attributes, children, leaf }) => {\r\n  if (leaf.bold) {\r\n    children = <strong>{children}</strong>;\r\n  }\r\n\r\n  if (leaf.code) {\r\n    children = <code>{children}</code>;\r\n  }\r\n\r\n  if (leaf.italic) {\r\n    children = <em>{children}</em>;\r\n  }\r\n\r\n  if (leaf.underline) {\r\n    children = <u>{children}</u>;\r\n  }\r\n\r\n  return <span {...attributes}>{children}</span>;\r\n};\r\n\r\nconst BlockButton = ({ format, icon }) => {\r\n  const editor = useSlate();\r\n  return (\r\n    <Button\r\n      active={isBlockActive(editor, format)}\r\n      onMouseDown={(event) => {\r\n        event.preventDefault();\r\n        toggleBlock(editor, format);\r\n      }}\r\n    >\r\n      <Icon>{icon}</Icon>\r\n    </Button>\r\n  );\r\n};\r\n\r\nconst MarkButton = ({ format, icon }) => {\r\n  const editor = useSlate();\r\n  return (\r\n    <Button\r\n      active={isMarkActive(editor, format)}\r\n      onMouseDown={(event) => {\r\n        event.preventDefault();\r\n        toggleMark(editor, format);\r\n      }}\r\n    >\r\n      <Icon>{icon}</Icon>\r\n    </Button>\r\n  );\r\n};\r\n\r\nconst initialValue = [\r\n  {\r\n    type: \"paragraph\",\r\n    children: [\r\n      { text: \"This is editable \" },\r\n      { text: \"rich\", bold: true },\r\n      { text: \" text, \" },\r\n      { text: \"much\", italic: true },\r\n      { text: \" better than a \" },\r\n      { text: \"<textarea>\", code: true },\r\n      { text: \"!\" },\r\n    ],\r\n  },\r\n  {\r\n    type: \"paragraph\",\r\n    children: [\r\n      {\r\n        text: \"Since it's rich text, you can do things like turn a selection of text \",\r\n      },\r\n      { text: \"bold\", bold: true },\r\n      {\r\n        text: \", or add a semantically rendered block quote in the middle of the page, like this:\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: \"block-quote\",\r\n    children: [{ text: \"A wise quote.\" }],\r\n  },\r\n  {\r\n    type: \"paragraph\",\r\n    children: [{ text: \"Try it out for yourself!\" }],\r\n  },\r\n];\r\n\r\nexport default RichTextExample;\r\n","import React, { useState } from \"react\";\r\nimport Editor from \"../components/Editor\";\r\nimport { create } from \"../api/blog\";\r\n\r\nconst styles: {\r\n  row: React.CSSProperties;\r\n  blogName: React.CSSProperties;\r\n  createButton: React.CSSProperties;\r\n  container: React.CSSProperties;\r\n  errorCode: React.CSSProperties;\r\n  titleError: React.CSSProperties;\r\n} = {\r\n  container: { display: \"flex\", flexDirection: \"column\" },\r\n  row: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    marginBottom: \"1rem\",\r\n    backgroundColor: \"#FAFAFA\",\r\n    width: \"max-content\",\r\n    padding: \"1rem\",\r\n  },\r\n  blogName: {\r\n    width: \"20em\",\r\n    marginLeft: \"1rem\",\r\n    outline: \"none\",\r\n    border: \"solid thin #acacac\",\r\n    padding: \"0.4rem\",\r\n    borderRadius: \"2px\",\r\n    backgroundColor: \"#FAFAFA\",\r\n  },\r\n  createButton: {\r\n    padding: \"1rem 2rem\",\r\n    cursor: \"pointer\",\r\n    border: \"none\",\r\n    marginLeft: \"auto\",\r\n  },\r\n  errorCode: {\r\n    padding: \"0.7rem 0\",\r\n    color: \"#FE4747\",\r\n    marginLeft: \"auto\",\r\n  },\r\n  titleError: {\r\n    padding: \"0 1rem\",\r\n    color: \"#FE4747\",\r\n  },\r\n};\r\n\r\ninterface CreateProps {\r\n  foo?: any;\r\n  user: any;\r\n}\r\n\r\nexport default function Create(props: CreateProps) {\r\n  const [value, setValue] = useState(initialValue);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const createBlog = async (content: any, title: string) => {\r\n    try {\r\n      let c = JSON.stringify(content);\r\n      await create(c, title);\r\n      /* Route to homepage */\r\n      window.location.href = \"/\";\r\n    } catch (e: any) {\r\n      setError(e.response.data.error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <div style={styles.row}>\r\n        <label>Title</label>\r\n        <input\r\n          type=\"text\"\r\n          style={styles.blogName}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n          className=\"font\"\r\n        ></input>\r\n      </div>\r\n      <div style={{ backgroundColor: \"#FAFAFA\", padding: \"1rem 3rem\" }}>\r\n        <Editor value={value} setValue={setValue} />\r\n      </div>\r\n      <label style={styles.errorCode}>{error}</label>\r\n      <button\r\n        className=\"font\"\r\n        style={styles.createButton}\r\n        onClick={() => {\r\n          if (value[0].children[0].text.length > 0) {\r\n            createBlog(value, title);\r\n          }\r\n        }}\r\n      >\r\n        Create\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst initialValue = [\r\n  {\r\n    type: \"paragraph\",\r\n    children: [\r\n      { text: \"This is editable \" },\r\n      { text: \"rich\", bold: true },\r\n      { text: \" text, \" },\r\n      { text: \"much\", italic: true },\r\n      { text: \" better than a \" },\r\n      { text: \"<textarea>\", code: true },\r\n      { text: \"!\" },\r\n    ],\r\n  },\r\n  {\r\n    type: \"paragraph\",\r\n    children: [\r\n      {\r\n        text: \"Since it's rich text, you can do things like turn a selection of text \",\r\n      },\r\n      { text: \"bold\", bold: true },\r\n      {\r\n        text: \", or add a semantically rendered block quote in the middle of the page, like this:\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: \"block-quote\",\r\n    children: [{ text: \"A wise quote.\" }],\r\n  },\r\n  {\r\n    type: \"paragraph\",\r\n    children: [{ text: \"Try it out for yourself!\" }],\r\n  },\r\n];\r\n"],"sourceRoot":""}