{"version":3,"sources":["util/emailverification.ts","pages/Signup.tsx"],"names":["validateEmail","email","test","String","toLowerCase","styles","container","flexDirection","display","width","margin","infoText","fontSize","color","labelText","marginTop","inputBox","padding","borderRadius","outline","border","createButton","backgroundColor","cursor","googleButton","errorCode","height","userSelect","Signup","useState","usernameError","setUsernameError","emailError","setEmailError","passwordError","setPasswordError","confirmPasswordError","setConfirmPasswordError","responseError","setResponseError","username","setUsername","setEmail","password","setPassword","confirmPassword","setConfirmPassword","signupWithEmailAndPassword","cpassword","a","length","signup","object","token","data","saveToStore","window","location","href","response","error","style","textDecoration","to","type","placeholder","className","onChange","e","target","value","onClick"],"mappings":"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","file":"static/js/9.aa40b94b.chunk.js","sourcesContent":["function validateEmail(email: string) {\r\n  const re =\r\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  return re.test(String(email).toLowerCase());\r\n}\r\n\r\nexport default validateEmail;\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { signup } from \"../api/auth\";\r\n/* Utils */\r\nimport { saveToStore } from \"../util/localstore\";\r\nimport validateEmail from \"../util/emailverification\";\r\n\r\nconst styles: {\r\n  container: React.CSSProperties;\r\n  infoText: React.CSSProperties;\r\n  labelText: React.CSSProperties;\r\n  inputBox: React.CSSProperties;\r\n  createButton: React.CSSProperties;\r\n  googleButton: React.CSSProperties;\r\n  errorCode: React.CSSProperties;\r\n} = {\r\n  container: {\r\n    flexDirection: \"column\",\r\n    display: \"flex\",\r\n    width: \"60%\",\r\n    margin: \"auto\",\r\n  },\r\n  infoText: { fontSize: \"18px\", color: \"grey\" },\r\n  labelText: { fontSize: \"18px\", marginTop: \"1rem\", color: \"#002868\" },\r\n  inputBox: {\r\n    padding: \"1rem\",\r\n    borderRadius: \"10px\",\r\n    outline: \"none\",\r\n    border: \"solid thin #D6D6D6\",\r\n  },\r\n  createButton: {\r\n    marginTop: \"2rem\",\r\n    padding: \"1rem\",\r\n    backgroundColor: \"#0364FF\",\r\n    color: \"white\",\r\n    outline: \"none\",\r\n    borderRadius: \"10px\",\r\n    border: \"none\",\r\n    cursor: \"pointer\",\r\n  },\r\n  googleButton: {\r\n    marginTop: \"0.5rem\",\r\n    padding: \"1rem\",\r\n    outline: \"none\",\r\n    borderRadius: \"10px\",\r\n    border: \"none\",\r\n    cursor: \"pointer\",\r\n  },\r\n  errorCode: {\r\n    height: \"1rem\",\r\n    color: \"#FE4747\",\r\n    userSelect: \"none\",\r\n    fontSize: \"13px\",\r\n    marginTop: \"5px\",\r\n  },\r\n};\r\n\r\nfunction Signup() {\r\n  /* Error code hooks */\r\n  const [usernameError, setUsernameError] = useState(\"\");\r\n  const [emailError, setEmailError] = useState(\"\");\r\n  const [passwordError, setPasswordError] = useState(\"\");\r\n  const [confirmPasswordError, setConfirmPasswordError] = useState(\"\");\r\n  const [responseError, setResponseError] = useState(\"\");\r\n  /* Store variables in state */\r\n  const [username, setUsername] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n\r\n  const signupWithEmailAndPassword = async (\r\n    username: string,\r\n    email: string,\r\n    password: string,\r\n    cpassword: string\r\n  ) => {\r\n    /* Clear all the errors before a request is made */\r\n    setUsernameError(\"\");\r\n    setEmailError(\"\");\r\n    setPasswordError(\"\");\r\n    setConfirmPasswordError(\"\");\r\n    setResponseError(\"\");\r\n\r\n    if (!username) {\r\n      setUsernameError(\"This field is required\");\r\n      return;\r\n    }\r\n    if (!validateEmail(email)) {\r\n      setEmailError(\"Invalid Email\");\r\n      return;\r\n    }\r\n    if (password.length < 8) {\r\n      setPasswordError(\"Password needs to be atleast 8 characters long\");\r\n      return;\r\n    }\r\n    if (cpassword !== password) {\r\n      setConfirmPasswordError(\"Passwords do not match\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      let object: any = await signup(email, username, password);\r\n      let token = object.data.token;\r\n      saveToStore(\"auth\", token);\r\n      /* Route back to main page after signup */\r\n      window.location.href = \"/\";\r\n    } catch (e: any) {\r\n      setResponseError(e.response.data.error || \"Internal server error\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div style={styles.container}>\r\n        <label style={styles.infoText}>Start for free</label>\r\n        <h1 style={{ color: \"#424242\" }}>Sign up to Bloggr</h1>\r\n        <label style={styles.infoText}>\r\n          Already a member?{\" \"}\r\n          <Link\r\n            style={{ color: \"#0364FF\", textDecoration: \"none\" }}\r\n            to=\"/auth/signin\"\r\n          >\r\n            Sign in\r\n          </Link>\r\n        </label>\r\n        <label style={styles.labelText}>Username</label>\r\n        <input\r\n          type=\"text\"\r\n          style={styles.inputBox}\r\n          placeholder=\"Username eg Chuck Norris\"\r\n          className=\"font\"\r\n          onChange={(e) => setUsername(e.target.value)}\r\n        ></input>\r\n        <label style={styles.errorCode}>{usernameError}</label>\r\n        <label style={styles.labelText}>Email</label>\r\n        <input\r\n          type=\"email\"\r\n          style={styles.inputBox}\r\n          placeholder=\"name@email.com\"\r\n          className=\"font\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        ></input>\r\n        <label style={styles.errorCode}>{emailError}</label>\r\n        <label style={styles.labelText}>Password</label>\r\n        <input\r\n          type=\"password\"\r\n          style={styles.inputBox}\r\n          className=\"font\"\r\n          placeholder=\"8+ Characters, 1 Capital\"\r\n          onChange={(e) => setPassword(e.target.value)}\r\n        ></input>\r\n        <label style={styles.errorCode}>{passwordError}</label>\r\n        <label style={styles.labelText}>Confirm Password</label>\r\n        <input\r\n          type=\"password\"\r\n          style={styles.inputBox}\r\n          className=\"font\"\r\n          placeholder=\"Confirm your password\"\r\n          onChange={(e) => setConfirmPassword(e.target.value)}\r\n        ></input>\r\n        <label style={styles.errorCode}>{confirmPasswordError}</label>\r\n        <button\r\n          style={styles.createButton}\r\n          className=\"font\"\r\n          onClick={() =>\r\n            signupWithEmailAndPassword(\r\n              username,\r\n              email,\r\n              password,\r\n              confirmPassword\r\n            )\r\n          }\r\n        >\r\n          Create an account\r\n        </button>     \r\n        <div style={{ margin: \"auto\" }}>\r\n          <label style={styles.errorCode}>{responseError}</label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Signup;\r\n"],"sourceRoot":""}